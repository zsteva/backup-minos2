Other points
============

Why don't we use MonitorFrame in the logger? We use it in MinosMonitor! And especially if we can tie it in with actions.


Revised server message broker
=============================

C:\berlios\Minos\Mind Map\New Minos Server.mm

Received data goes on central dispatch queue of all incoming and recycled  messages

Timer to put keep alive messages onto all empty output queues which haven't recently sent a message

When socket is free to transmit look at its output queue; transmit first from queue.

This isn't reliable, unless we add a concept of transactions that get acked. Can we rely on anything important being re-requested (like we do with monitored logs)? Actually if we CAN rely on that, we don't have to be concerned about the complicated recycling message mechanisms - we just ditch the queue and that server won't get the messages in the queue. Other messages will repeat. Chat messages may get lost though.

If socket fails 
	if a server message:
		First attempt to reconnect, and then send message
		Otherwise recycle queue onto dispatch queue
			- without any servers in list except ourselves
			- with a "please pass on" flag set
			- and delete this socket and its queue 
			- ignore any queued keep alive messages
	if an application message then it implies that the app has disappeared; clear the queue
	
Central dispatch thread looks at incoming queue
		Can we consolidate matching UUIDs from recycled messages?
		
==============================
Don't need jabber IDs; everything is done from queue/topic name. Links aren't (usually) one - one

1-1 links can be set up "ad hoc" - receiver creates, sends name to producer

topics/queues must be lightweight, and able to come and go quickly
==============================
How does all this work in practice?

Keyer (e.g.) sets up a topic and sends what it currently publishes. Logger (and others) must be able to subscribe to "local" keyer(and vice versa). I think this means that keyer sets up a topic name that is the same everywhere, but there are two parts (jabber ids anyone?); topic name and station name. Others can subscribe to "station" or "local" or "all" (all used e.g. for chat).

Apps must be able to enquire all stations. Is this a local protocol? What about "remote" (multiple hop away) stations - how do we find them? Stations need to beacon, then their name should arrive at all directly and indirectly linked stations. Should we also beacon all subscribed topics? Then if no one subscribed to a topic, don't pass it on?
==============================
Messages do not have to be XML; do we use an XML frame? WE should at least have block framing and block length in messages to make parsing easier. An XML frame means that any contained XML has to be escaped or encoded (e.g. base64)

No reason not to use our current system - &&len payload&&, but get rid of the XMPP payload. We still need some red tape:

Topic name
Message GUUID
Pass-on flag
Originator app/server
server list

	Sequence id - up to the payload?
	timestamp - again payload
