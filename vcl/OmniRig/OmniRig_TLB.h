// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev$
// File generated on 15/06/2011 17:42:47 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Afreet\OmniRig\OmniRig.exe (1)
// LIBID: {4FE359C5-A58F-459D-BE95-CA559FB4F270}
// LCID: 0
// Helpfile: 
// HelpString: OmniRig Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   OmniRig_TLBH
#define   OmniRig_TLBH

#pragma option push -b -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Omnirig_tlb
{

// *********************************************************************//
// HelpString: OmniRig Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_OmniRig;
extern __declspec (package) const GUID IID_IOmniRigX;
extern __declspec (package) const GUID DIID_IOmniRigXEvents;
extern __declspec (package) const GUID CLSID_OmniRigX;
extern __declspec (package) const GUID IID_IRigX;
extern __declspec (package) const GUID CLSID_RigX;
extern __declspec (package) const GUID IID_IPortBits;
extern __declspec (package) const GUID CLSID_PortBits;
extern __declspec (package) const GUID GUID_RigParamX;
extern __declspec (package) const GUID GUID_RigStatusX;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      RigParamX;
enum      RigStatusX;
interface DECLSPEC_UUID("{501A2858-3331-467A-837A-989FDEDACC7D}") IOmniRigX;
typedef TComInterface<IOmniRigX, &IID_IOmniRigX> IOmniRigXPtr;

interface DECLSPEC_UUID("{2219175F-E561-47E7-AD17-73C4D8891AA1}") IOmniRigXEvents;
typedef TComInterface<IOmniRigXEvents, &DIID_IOmniRigXEvents> IOmniRigXEventsPtr;

interface DECLSPEC_UUID("{D30A7E51-5862-45B7-BFFA-6415917DA0CF}") IRigX;
typedef TComInterface<IRigX, &IID_IRigX> IRigXPtr;

interface DECLSPEC_UUID("{3DEE2CC8-1EA3-46E7-B8B4-3E7321F2446A}") IPortBits;
typedef TComInterface<IPortBits, &IID_IPortBits> IPortBitsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IOmniRigX OmniRigX;
typedef IOmniRigXPtr OmniRigXPtr;
typedef IRigX RigX;
typedef IRigXPtr RigXPtr;
typedef IPortBits PortBits;
typedef IPortBitsPtr PortBitsPtr;

#define LIBID_OF_OmniRigX (&LIBID_OmniRig)
#define LIBID_OF_RigX (&LIBID_OmniRig)
#define LIBID_OF_PortBits (&LIBID_OmniRig)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum RigParamX
{
  PM_UNKNOWN = 1, 
  PM_FREQ = 2, 
  PM_FREQA = 4, 
  PM_FREQB = 8, 
  PM_PITCH = 16, 
  PM_RITOFFSET = 32, 
  PM_RIT0 = 64, 
  PM_VFOAA = 128, 
  PM_VFOAB = 256, 
  PM_VFOBA = 512, 
  PM_VFOBB = 1024, 
  PM_VFOA = 2048, 
  PM_VFOB = 4096, 
  PM_VFOEQUAL = 8192, 
  PM_VFOSWAP = 16384, 
  PM_SPLITON = 32768, 
  PM_SPLITOFF = 65536, 
  PM_RITON = 131072, 
  PM_RITOFF = 262144, 
  PM_XITON = 524288, 
  PM_XITOFF = 1048576, 
  PM_RX = 2097152, 
  PM_TX = 4194304, 
  PM_CW_U = 8388608, 
  PM_CW_L = 16777216, 
  PM_SSB_U = 33554432, 
  PM_SSB_L = 67108864, 
  PM_DIG_U = 134217728, 
  PM_DIG_L = 268435456, 
  PM_AM = 536870912, 
  PM_FM = 1073741824
} RigParamX;

typedef enum RigStatusX
{
  ST_NOTCONFIGURED = 0, 
  ST_DISABLED = 1, 
  ST_PORTBUSY = 2, 
  ST_NOTRESPONDING = 3, 
  ST_ONLINE = 4
} RigStatusX;

// *********************************************************************//
// Interface: IOmniRigX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {501A2858-3331-467A-837A-989FDEDACC7D}
// *********************************************************************//
interface IOmniRigX  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_InterfaceVersion(long* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_SoftwareVersion(long* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Rig1(Omnirig_tlb::IRigX** Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Rig2(Omnirig_tlb::IRigX** Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_DialogVisible(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_DialogVisible(VARIANT_BOOL Value/*[in]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_InterfaceVersion(void)
  {
    long Value;
    OLECHECK(this->get_InterfaceVersion((long*)&Value));
    return Value;
  }

  long __fastcall get_SoftwareVersion(void)
  {
    long Value;
    OLECHECK(this->get_SoftwareVersion((long*)&Value));
    return Value;
  }

  Omnirig_tlb::IRigXPtr __fastcall get_Rig1(void)
  {
    Omnirig_tlb::IRigXPtr Value;
    OLECHECK(this->get_Rig1(&Value));
    return Value;
  }

  Omnirig_tlb::IRigXPtr __fastcall get_Rig2(void)
  {
    Omnirig_tlb::IRigXPtr Value;
    OLECHECK(this->get_Rig2(&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DialogVisible(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DialogVisible((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   long            InterfaceVersion = {read = get_InterfaceVersion};
  __property   long            SoftwareVersion = {read = get_SoftwareVersion};
  __property   Omnirig_tlb::IRigXPtr Rig1 = {read = get_Rig1};
  __property   Omnirig_tlb::IRigXPtr Rig2 = {read = get_Rig2};
  __property   VARIANT_BOOL    DialogVisible = {read = get_DialogVisible, write = set_DialogVisible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOmniRigXEvents
// Flags:     (4096) Dispatchable
// GUID:      {2219175F-E561-47E7-AD17-73C4D8891AA1}
// *********************************************************************//
interface IOmniRigXEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall VisibleChange()
  {
    _TDispID _dispid(/* VisibleChange */ DISPID(1));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall RigTypeChange(long RigNumber/*[in]*/)
  {
    _TDispID _dispid(/* RigTypeChange */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = RigNumber /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall StatusChange(long RigNumber/*[in]*/)
  {
    _TDispID _dispid(/* StatusChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = RigNumber /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ParamsChange(long RigNumber/*[in]*/, long Params/*[in]*/)
  {
    _TDispID _dispid(/* ParamsChange */ DISPID(4));
    TAutoArgs<2> _args;
    _args[1] = RigNumber /*[VT_I4:0]*/;
    _args[2] = Params /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CustomReply(long RigNumber/*[in]*/, VARIANT Command/*[in]*/, 
                                 VARIANT Reply/*[in]*/)
  {
    _TDispID _dispid(/* CustomReply */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = RigNumber /*[VT_I4:0]*/;
    _args[2] = Command /*[VT_VARIANT:0]*/;
    _args[3] = Reply /*[VT_VARIANT:0]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IRigX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D30A7E51-5862-45B7-BFFA-6415917DA0CF}
// *********************************************************************//
interface IRigX  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_RigType(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_ReadableParams(long* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_WriteableParams(long* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                                                    VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                                                     VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Status(Omnirig_tlb::RigStatusX* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_StatusStr(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_Freq(long* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_Freq(long Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_FreqA(long* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_FreqA(long Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_FreqB(long* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_FreqB(long Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_RitOffset(long* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_RitOffset(long Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Pitch(long* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_Pitch(long Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_Vfo(Omnirig_tlb::RigParamX* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_Vfo(Omnirig_tlb::RigParamX Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_Split(Omnirig_tlb::RigParamX* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_Split(Omnirig_tlb::RigParamX Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_Rit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_Rit(Omnirig_tlb::RigParamX Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_Xit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_Xit(Omnirig_tlb::RigParamX Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_Tx(Omnirig_tlb::RigParamX* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_Tx(Omnirig_tlb::RigParamX Value/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_Mode(Omnirig_tlb::RigParamX* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_Mode(Omnirig_tlb::RigParamX Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE ClearRit(void) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE SetSimplexMode(long Freq/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE SetSplitMode(long RxFreq/*[in]*/, long TxFreq/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE FrequencyOfTone(long Tone/*[in]*/, long* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE SendCustomCommand(VARIANT Command/*[in]*/, 
                                                      long ReplyLength/*[in]*/, 
                                                      VARIANT ReplyEnd/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE GetRxFrequency(long* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE GetTxFrequency(long* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_PortBits(Omnirig_tlb::IPortBits** Value/*[out,retval]*/) = 0; // [26]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_RigType(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_RigType((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_ReadableParams(void)
  {
    long Value;
    OLECHECK(this->get_ReadableParams((long*)&Value));
    return Value;
  }

  long __fastcall get_WriteableParams(void)
  {
    long Value;
    OLECHECK(this->get_WriteableParams((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->IsParamReadable(Param, (VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->IsParamWriteable(Param, (VARIANT_BOOL*)&Value));
    return Value;
  }

  Omnirig_tlb::RigStatusX __fastcall get_Status(void)
  {
    Omnirig_tlb::RigStatusX Value;
    OLECHECK(this->get_Status((Omnirig_tlb::RigStatusX*)&Value));
    return Value;
  }

  BSTR __fastcall get_StatusStr(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_StatusStr((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_Freq(void)
  {
    long Value;
    OLECHECK(this->get_Freq((long*)&Value));
    return Value;
  }

  long __fastcall get_FreqA(void)
  {
    long Value;
    OLECHECK(this->get_FreqA((long*)&Value));
    return Value;
  }

  long __fastcall get_FreqB(void)
  {
    long Value;
    OLECHECK(this->get_FreqB((long*)&Value));
    return Value;
  }

  long __fastcall get_RitOffset(void)
  {
    long Value;
    OLECHECK(this->get_RitOffset((long*)&Value));
    return Value;
  }

  long __fastcall get_Pitch(void)
  {
    long Value;
    OLECHECK(this->get_Pitch((long*)&Value));
    return Value;
  }

  Omnirig_tlb::RigParamX __fastcall get_Vfo(void)
  {
    Omnirig_tlb::RigParamX Value;
    OLECHECK(this->get_Vfo((Omnirig_tlb::RigParamX*)&Value));
    return Value;
  }

  Omnirig_tlb::RigParamX __fastcall get_Split(void)
  {
    Omnirig_tlb::RigParamX Value;
    OLECHECK(this->get_Split((Omnirig_tlb::RigParamX*)&Value));
    return Value;
  }

  Omnirig_tlb::RigParamX __fastcall get_Rit(void)
  {
    Omnirig_tlb::RigParamX Value;
    OLECHECK(this->get_Rit((Omnirig_tlb::RigParamX*)&Value));
    return Value;
  }

  Omnirig_tlb::RigParamX __fastcall get_Xit(void)
  {
    Omnirig_tlb::RigParamX Value;
    OLECHECK(this->get_Xit((Omnirig_tlb::RigParamX*)&Value));
    return Value;
  }

  Omnirig_tlb::RigParamX __fastcall get_Tx(void)
  {
    Omnirig_tlb::RigParamX Value;
    OLECHECK(this->get_Tx((Omnirig_tlb::RigParamX*)&Value));
    return Value;
  }

  Omnirig_tlb::RigParamX __fastcall get_Mode(void)
  {
    Omnirig_tlb::RigParamX Value;
    OLECHECK(this->get_Mode((Omnirig_tlb::RigParamX*)&Value));
    return Value;
  }

  long __fastcall FrequencyOfTone(long Tone/*[in]*/)
  {
    long Value;
    OLECHECK(this->FrequencyOfTone(Tone, (long*)&Value));
    return Value;
  }

  long __fastcall GetRxFrequency(void)
  {
    long Value;
    OLECHECK(this->GetRxFrequency((long*)&Value));
    return Value;
  }

  long __fastcall GetTxFrequency(void)
  {
    long Value;
    OLECHECK(this->GetTxFrequency((long*)&Value));
    return Value;
  }

  Omnirig_tlb::IPortBitsPtr __fastcall get_PortBits(void)
  {
    Omnirig_tlb::IPortBitsPtr Value;
    OLECHECK(this->get_PortBits(&Value));
    return Value;
  }


  __property   BSTR            RigType = {read = get_RigType};
  __property   long            ReadableParams = {read = get_ReadableParams};
  __property   long            WriteableParams = {read = get_WriteableParams};
  __property   Omnirig_tlb::RigStatusX Status = {read = get_Status};
  __property   BSTR            StatusStr = {read = get_StatusStr};
  __property   long            Freq = {read = get_Freq, write = set_Freq};
  __property   long            FreqA = {read = get_FreqA, write = set_FreqA};
  __property   long            FreqB = {read = get_FreqB, write = set_FreqB};
  __property   long            RitOffset = {read = get_RitOffset, write = set_RitOffset};
  __property   long            Pitch = {read = get_Pitch, write = set_Pitch};
  __property   Omnirig_tlb::RigParamX Vfo = {read = get_Vfo, write = set_Vfo};
  __property   Omnirig_tlb::RigParamX Split = {read = get_Split, write = set_Split};
  __property   Omnirig_tlb::RigParamX Rit = {read = get_Rit, write = set_Rit};
  __property   Omnirig_tlb::RigParamX Xit = {read = get_Xit, write = set_Xit};
  __property   Omnirig_tlb::RigParamX Tx = {read = get_Tx, write = set_Tx};
  __property   Omnirig_tlb::RigParamX Mode = {read = get_Mode, write = set_Mode};
  __property   Omnirig_tlb::IPortBitsPtr PortBits = {read = get_PortBits};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPortBits
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DEE2CC8-1EA3-46E7-B8B4-3E7321F2446A}
// *********************************************************************//
interface IPortBits  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Lock(VARIANT_BOOL* Ok/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Rts(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Rts(VARIANT_BOOL Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Dtr(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_Dtr(VARIANT_BOOL Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Cts(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Dsr(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE Unlock(void) = 0; // [6]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall Lock(void)
  {
    VARIANT_BOOL Ok;
    OLECHECK(this->Lock((VARIANT_BOOL*)&Ok));
    return Ok;
  }

  VARIANT_BOOL __fastcall get_Rts(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Rts((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Dtr(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Dtr((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Cts(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Cts((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Dsr(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Dsr((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    Rts = {read = get_Rts, write = set_Rts};
  __property   VARIANT_BOOL    Dtr = {read = get_Dtr, write = set_Dtr};
  __property   VARIANT_BOOL    Cts = {read = get_Cts};
  __property   VARIANT_BOOL    Dsr = {read = get_Dsr};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIOmniRigX
// Interface: IOmniRigX
// *********************************************************************//
template <class T /* IOmniRigX */ >
class TCOMIOmniRigXT : public TComInterface<IOmniRigX>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOmniRigXT() {}
  TCOMIOmniRigXT(IOmniRigX *intf, bool addRef = false) : TComInterface<IOmniRigX>(intf, addRef) {}
  TCOMIOmniRigXT(const TCOMIOmniRigXT& src) : TComInterface<IOmniRigX>(src) {}
  TCOMIOmniRigXT& operator=(const TCOMIOmniRigXT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_InterfaceVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_InterfaceVersion(void);
  HRESULT         __fastcall get_SoftwareVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_SoftwareVersion(void);
  HRESULT         __fastcall get_Rig1(Omnirig_tlb::IRigX** Value/*[out,retval]*/);
  Omnirig_tlb::IRigXPtr __fastcall get_Rig1(void);
  HRESULT         __fastcall get_Rig2(Omnirig_tlb::IRigX** Value/*[out,retval]*/);
  Omnirig_tlb::IRigXPtr __fastcall get_Rig2(void);
  HRESULT         __fastcall get_DialogVisible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DialogVisible(void);
  HRESULT         __fastcall set_DialogVisible(VARIANT_BOOL Value/*[in]*/);

  __property   long            InterfaceVersion = {read = get_InterfaceVersion};
  __property   long            SoftwareVersion = {read = get_SoftwareVersion};
  __property   Omnirig_tlb::IRigXPtr Rig1 = {read = get_Rig1};
  __property   Omnirig_tlb::IRigXPtr Rig2 = {read = get_Rig2};
  __property   VARIANT_BOOL    DialogVisible = {read = get_DialogVisible, write = set_DialogVisible};
};
typedef TCOMIOmniRigXT<IOmniRigX> TCOMIOmniRigX;

// *********************************************************************//
// DispIntf:  IOmniRigX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {501A2858-3331-467A-837A-989FDEDACC7D}
// *********************************************************************//
template<class T>
class IOmniRigXDispT : public TAutoDriver<IOmniRigX>
{
public:
  IOmniRigXDispT(){}

  IOmniRigXDispT(IOmniRigX *pintf)
  {
    TAutoDriver<IOmniRigX>::Bind(pintf, false);
  }

  IOmniRigXDispT(IOmniRigXPtr pintf)
  {
    TAutoDriver<IOmniRigX>::Bind(pintf, true);
  }

  IOmniRigXDispT& operator=(IOmniRigX *pintf)
  {
    TAutoDriver<IOmniRigX>::Bind(pintf, false);
    return *this;
  }

  IOmniRigXDispT& operator=(IOmniRigXPtr pintf)
  {
    TAutoDriver<IOmniRigX>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OmniRigX));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OmniRigX);
  }

  HRESULT         __fastcall get_InterfaceVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_InterfaceVersion(void);
  HRESULT         __fastcall get_SoftwareVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_SoftwareVersion(void);
  HRESULT         __fastcall get_Rig1(Omnirig_tlb::IRigX** Value/*[out,retval]*/);
  Omnirig_tlb::IRigXPtr __fastcall get_Rig1(void);
  HRESULT         __fastcall get_Rig2(Omnirig_tlb::IRigX** Value/*[out,retval]*/);
  Omnirig_tlb::IRigXPtr __fastcall get_Rig2(void);
  HRESULT         __fastcall get_DialogVisible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DialogVisible(void);
  HRESULT         __fastcall set_DialogVisible(VARIANT_BOOL Value/*[in]*/);

  __property   long            InterfaceVersion = {read = get_InterfaceVersion};
  __property   long            SoftwareVersion = {read = get_SoftwareVersion};
  __property   Omnirig_tlb::IRigXPtr Rig1 = {read = get_Rig1};
  __property   Omnirig_tlb::IRigXPtr Rig2 = {read = get_Rig2};
  __property   VARIANT_BOOL    DialogVisible = {read = get_DialogVisible, write = set_DialogVisible};
};
typedef IOmniRigXDispT<IOmniRigX> IOmniRigXDisp;

// *********************************************************************//
// DispIntf:  IOmniRigXEvents
// Flags:     (4096) Dispatchable
// GUID:      {2219175F-E561-47E7-AD17-73C4D8891AA1}
// *********************************************************************//
template <class T>
class IOmniRigXEventsDispT : public TAutoDriver<IOmniRigXEvents>
{
public:
  IOmniRigXEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall VisibleChange();
  HRESULT         __fastcall RigTypeChange(long RigNumber/*[in]*/);
  HRESULT         __fastcall StatusChange(long RigNumber/*[in]*/);
  HRESULT         __fastcall ParamsChange(long RigNumber/*[in]*/, long Params/*[in]*/);
  HRESULT         __fastcall CustomReply(long RigNumber/*[in]*/, VARIANT Command/*[in]*/, 
                                         VARIANT Reply/*[in]*/);

};
typedef IOmniRigXEventsDispT<IOmniRigXEvents> IOmniRigXEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIRigX
// Interface: IRigX
// *********************************************************************//
template <class T /* IRigX */ >
class TCOMIRigXT : public TComInterface<IRigX>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRigXT() {}
  TCOMIRigXT(IRigX *intf, bool addRef = false) : TComInterface<IRigX>(intf, addRef) {}
  TCOMIRigXT(const TCOMIRigXT& src) : TComInterface<IRigX>(src) {}
  TCOMIRigXT& operator=(const TCOMIRigXT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_RigType(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RigType(void);
  HRESULT         __fastcall get_ReadableParams(long* Value/*[out,retval]*/);
  long            __fastcall get_ReadableParams(void);
  HRESULT         __fastcall get_WriteableParams(long* Value/*[out,retval]*/);
  long            __fastcall get_WriteableParams(void);
  HRESULT         __fastcall IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                                             VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/);
  HRESULT         __fastcall IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                                              VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/);
  HRESULT         __fastcall get_Status(Omnirig_tlb::RigStatusX* Value/*[out,retval]*/);
  Omnirig_tlb::RigStatusX __fastcall get_Status(void);
  HRESULT         __fastcall get_StatusStr(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_StatusStr(void);
  HRESULT         __fastcall get_Freq(long* Value/*[out,retval]*/);
  long            __fastcall get_Freq(void);
  HRESULT         __fastcall set_Freq(long Value/*[in]*/);
  HRESULT         __fastcall get_FreqA(long* Value/*[out,retval]*/);
  long            __fastcall get_FreqA(void);
  HRESULT         __fastcall set_FreqA(long Value/*[in]*/);
  HRESULT         __fastcall get_FreqB(long* Value/*[out,retval]*/);
  long            __fastcall get_FreqB(void);
  HRESULT         __fastcall set_FreqB(long Value/*[in]*/);
  HRESULT         __fastcall get_RitOffset(long* Value/*[out,retval]*/);
  long            __fastcall get_RitOffset(void);
  HRESULT         __fastcall set_RitOffset(long Value/*[in]*/);
  HRESULT         __fastcall get_Pitch(long* Value/*[out,retval]*/);
  long            __fastcall get_Pitch(void);
  HRESULT         __fastcall set_Pitch(long Value/*[in]*/);
  HRESULT         __fastcall get_Vfo(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Vfo(void);
  HRESULT         __fastcall set_Vfo(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Split(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Split(void);
  HRESULT         __fastcall set_Split(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Rit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Rit(void);
  HRESULT         __fastcall set_Rit(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Xit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Xit(void);
  HRESULT         __fastcall set_Xit(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Tx(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Tx(void);
  HRESULT         __fastcall set_Tx(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Mode(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Mode(void);
  HRESULT         __fastcall set_Mode(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall ClearRit(void);
  HRESULT         __fastcall SetSimplexMode(long Freq/*[in]*/);
  HRESULT         __fastcall SetSplitMode(long RxFreq/*[in]*/, long TxFreq/*[in]*/);
  HRESULT         __fastcall FrequencyOfTone(long Tone/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall FrequencyOfTone(long Tone/*[in]*/);
  HRESULT         __fastcall SendCustomCommand(VARIANT Command/*[in]*/, long ReplyLength/*[in]*/, 
                                               VARIANT ReplyEnd/*[in]*/);
  HRESULT         __fastcall GetRxFrequency(long* Value/*[out,retval]*/);
  long            __fastcall GetRxFrequency(void);
  HRESULT         __fastcall GetTxFrequency(long* Value/*[out,retval]*/);
  long            __fastcall GetTxFrequency(void);
  HRESULT         __fastcall get_PortBits(Omnirig_tlb::IPortBits** Value/*[out,retval]*/);
  Omnirig_tlb::IPortBitsPtr __fastcall get_PortBits(void);

  __property   BSTR            RigType = {read = get_RigType};
  __property   long            ReadableParams = {read = get_ReadableParams};
  __property   long            WriteableParams = {read = get_WriteableParams};
  __property   Omnirig_tlb::RigStatusX Status = {read = get_Status};
  __property   BSTR            StatusStr = {read = get_StatusStr};
  __property   long            Freq = {read = get_Freq, write = set_Freq};
  __property   long            FreqA = {read = get_FreqA, write = set_FreqA};
  __property   long            FreqB = {read = get_FreqB, write = set_FreqB};
  __property   long            RitOffset = {read = get_RitOffset, write = set_RitOffset};
  __property   long            Pitch = {read = get_Pitch, write = set_Pitch};
  __property   Omnirig_tlb::RigParamX Vfo = {read = get_Vfo, write = set_Vfo};
  __property   Omnirig_tlb::RigParamX Split = {read = get_Split, write = set_Split};
  __property   Omnirig_tlb::RigParamX Rit = {read = get_Rit, write = set_Rit};
  __property   Omnirig_tlb::RigParamX Xit = {read = get_Xit, write = set_Xit};
  __property   Omnirig_tlb::RigParamX Tx = {read = get_Tx, write = set_Tx};
  __property   Omnirig_tlb::RigParamX Mode = {read = get_Mode, write = set_Mode};
  __property   Omnirig_tlb::IPortBitsPtr PortBits = {read = get_PortBits};
};
typedef TCOMIRigXT<IRigX> TCOMIRigX;

// *********************************************************************//
// DispIntf:  IRigX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D30A7E51-5862-45B7-BFFA-6415917DA0CF}
// *********************************************************************//
template<class T>
class IRigXDispT : public TAutoDriver<IRigX>
{
public:
  IRigXDispT(){}

  IRigXDispT(IRigX *pintf)
  {
    TAutoDriver<IRigX>::Bind(pintf, false);
  }

  IRigXDispT(IRigXPtr pintf)
  {
    TAutoDriver<IRigX>::Bind(pintf, true);
  }

  IRigXDispT& operator=(IRigX *pintf)
  {
    TAutoDriver<IRigX>::Bind(pintf, false);
    return *this;
  }

  IRigXDispT& operator=(IRigXPtr pintf)
  {
    TAutoDriver<IRigX>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RigX));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RigX);
  }

  HRESULT         __fastcall get_RigType(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RigType(void);
  HRESULT         __fastcall get_ReadableParams(long* Value/*[out,retval]*/);
  long            __fastcall get_ReadableParams(void);
  HRESULT         __fastcall get_WriteableParams(long* Value/*[out,retval]*/);
  long            __fastcall get_WriteableParams(void);
  HRESULT         __fastcall IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                                             VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/);
  HRESULT         __fastcall IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                                              VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/);
  HRESULT         __fastcall get_Status(Omnirig_tlb::RigStatusX* Value/*[out,retval]*/);
  Omnirig_tlb::RigStatusX __fastcall get_Status(void);
  HRESULT         __fastcall get_StatusStr(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_StatusStr(void);
  HRESULT         __fastcall get_Freq(long* Value/*[out,retval]*/);
  long            __fastcall get_Freq(void);
  HRESULT         __fastcall set_Freq(long Value/*[in]*/);
  HRESULT         __fastcall get_FreqA(long* Value/*[out,retval]*/);
  long            __fastcall get_FreqA(void);
  HRESULT         __fastcall set_FreqA(long Value/*[in]*/);
  HRESULT         __fastcall get_FreqB(long* Value/*[out,retval]*/);
  long            __fastcall get_FreqB(void);
  HRESULT         __fastcall set_FreqB(long Value/*[in]*/);
  HRESULT         __fastcall get_RitOffset(long* Value/*[out,retval]*/);
  long            __fastcall get_RitOffset(void);
  HRESULT         __fastcall set_RitOffset(long Value/*[in]*/);
  HRESULT         __fastcall get_Pitch(long* Value/*[out,retval]*/);
  long            __fastcall get_Pitch(void);
  HRESULT         __fastcall set_Pitch(long Value/*[in]*/);
  HRESULT         __fastcall get_Vfo(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Vfo(void);
  HRESULT         __fastcall set_Vfo(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Split(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Split(void);
  HRESULT         __fastcall set_Split(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Rit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Rit(void);
  HRESULT         __fastcall set_Rit(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Xit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Xit(void);
  HRESULT         __fastcall set_Xit(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Tx(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Tx(void);
  HRESULT         __fastcall set_Tx(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall get_Mode(Omnirig_tlb::RigParamX* Value/*[out,retval]*/);
  Omnirig_tlb::RigParamX __fastcall get_Mode(void);
  HRESULT         __fastcall set_Mode(Omnirig_tlb::RigParamX Value/*[in]*/);
  HRESULT         __fastcall ClearRit();
  HRESULT         __fastcall SetSimplexMode(long Freq/*[in]*/);
  HRESULT         __fastcall SetSplitMode(long RxFreq/*[in]*/, long TxFreq/*[in]*/);
  HRESULT         __fastcall FrequencyOfTone(long Tone/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall FrequencyOfTone(long Tone/*[in]*/);
  HRESULT         __fastcall SendCustomCommand(VARIANT Command/*[in]*/, long ReplyLength/*[in]*/, 
                                               VARIANT ReplyEnd/*[in]*/);
  HRESULT         __fastcall GetRxFrequency(long* Value/*[out,retval]*/);
  long            __fastcall GetRxFrequency(void);
  HRESULT         __fastcall GetTxFrequency(long* Value/*[out,retval]*/);
  long            __fastcall GetTxFrequency(void);
  HRESULT         __fastcall get_PortBits(Omnirig_tlb::IPortBits** Value/*[out,retval]*/);
  Omnirig_tlb::IPortBitsPtr __fastcall get_PortBits(void);

  __property   BSTR            RigType = {read = get_RigType};
  __property   long            ReadableParams = {read = get_ReadableParams};
  __property   long            WriteableParams = {read = get_WriteableParams};
  __property   Omnirig_tlb::RigStatusX Status = {read = get_Status};
  __property   BSTR            StatusStr = {read = get_StatusStr};
  __property   long            Freq = {read = get_Freq, write = set_Freq};
  __property   long            FreqA = {read = get_FreqA, write = set_FreqA};
  __property   long            FreqB = {read = get_FreqB, write = set_FreqB};
  __property   long            RitOffset = {read = get_RitOffset, write = set_RitOffset};
  __property   long            Pitch = {read = get_Pitch, write = set_Pitch};
  __property   Omnirig_tlb::RigParamX Vfo = {read = get_Vfo, write = set_Vfo};
  __property   Omnirig_tlb::RigParamX Split = {read = get_Split, write = set_Split};
  __property   Omnirig_tlb::RigParamX Rit = {read = get_Rit, write = set_Rit};
  __property   Omnirig_tlb::RigParamX Xit = {read = get_Xit, write = set_Xit};
  __property   Omnirig_tlb::RigParamX Tx = {read = get_Tx, write = set_Tx};
  __property   Omnirig_tlb::RigParamX Mode = {read = get_Mode, write = set_Mode};
  __property   Omnirig_tlb::IPortBitsPtr PortBits = {read = get_PortBits};
};
typedef IRigXDispT<IRigX> IRigXDisp;

// *********************************************************************//
// SmartIntf: TCOMIPortBits
// Interface: IPortBits
// *********************************************************************//
template <class T /* IPortBits */ >
class TCOMIPortBitsT : public TComInterface<IPortBits>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPortBitsT() {}
  TCOMIPortBitsT(IPortBits *intf, bool addRef = false) : TComInterface<IPortBits>(intf, addRef) {}
  TCOMIPortBitsT(const TCOMIPortBitsT& src) : TComInterface<IPortBits>(src) {}
  TCOMIPortBitsT& operator=(const TCOMIPortBitsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Lock(VARIANT_BOOL* Ok/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Lock(void);
  HRESULT         __fastcall get_Rts(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Rts(void);
  HRESULT         __fastcall set_Rts(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Dtr(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Dtr(void);
  HRESULT         __fastcall set_Dtr(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Cts(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Cts(void);
  HRESULT         __fastcall get_Dsr(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Dsr(void);
  HRESULT         __fastcall Unlock(void);

  __property   VARIANT_BOOL    Rts = {read = get_Rts, write = set_Rts};
  __property   VARIANT_BOOL    Dtr = {read = get_Dtr, write = set_Dtr};
  __property   VARIANT_BOOL    Cts = {read = get_Cts};
  __property   VARIANT_BOOL    Dsr = {read = get_Dsr};
};
typedef TCOMIPortBitsT<IPortBits> TCOMIPortBits;

// *********************************************************************//
// DispIntf:  IPortBits
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DEE2CC8-1EA3-46E7-B8B4-3E7321F2446A}
// *********************************************************************//
template<class T>
class IPortBitsDispT : public TAutoDriver<IPortBits>
{
public:
  IPortBitsDispT(){}

  IPortBitsDispT(IPortBits *pintf)
  {
    TAutoDriver<IPortBits>::Bind(pintf, false);
  }

  IPortBitsDispT(IPortBitsPtr pintf)
  {
    TAutoDriver<IPortBits>::Bind(pintf, true);
  }

  IPortBitsDispT& operator=(IPortBits *pintf)
  {
    TAutoDriver<IPortBits>::Bind(pintf, false);
    return *this;
  }

  IPortBitsDispT& operator=(IPortBitsPtr pintf)
  {
    TAutoDriver<IPortBits>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PortBits));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PortBits);
  }

  HRESULT         __fastcall Lock(VARIANT_BOOL* Ok/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Lock(void);
  HRESULT         __fastcall get_Rts(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Rts(void);
  HRESULT         __fastcall set_Rts(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Dtr(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Dtr(void);
  HRESULT         __fastcall set_Dtr(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Cts(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Cts(void);
  HRESULT         __fastcall get_Dsr(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Dsr(void);
  HRESULT         __fastcall Unlock();

  __property   VARIANT_BOOL    Rts = {read = get_Rts, write = set_Rts};
  __property   VARIANT_BOOL    Dtr = {read = get_Dtr, write = set_Dtr};
  __property   VARIANT_BOOL    Cts = {read = get_Cts};
  __property   VARIANT_BOOL    Dsr = {read = get_Dsr};
};
typedef IPortBitsDispT<IPortBits> IPortBitsDisp;

// *********************************************************************//
// SmartIntf: TCOMIOmniRigX
// Interface: IOmniRigX
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOmniRigXT<T>::get_InterfaceVersion(long* Value/*[out,retval]*/)
{
  return (*this)->get_InterfaceVersion(Value);
}

template <class T> long __fastcall
TCOMIOmniRigXT<T>::get_InterfaceVersion(void)
{
  long Value;
  OLECHECK(this->get_InterfaceVersion((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOmniRigXT<T>::get_SoftwareVersion(long* Value/*[out,retval]*/)
{
  return (*this)->get_SoftwareVersion(Value);
}

template <class T> long __fastcall
TCOMIOmniRigXT<T>::get_SoftwareVersion(void)
{
  long Value;
  OLECHECK(this->get_SoftwareVersion((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOmniRigXT<T>::get_Rig1(Omnirig_tlb::IRigX** Value/*[out,retval]*/)
{
  return (*this)->get_Rig1(Value);
}

template <class T> Omnirig_tlb::IRigXPtr __fastcall
TCOMIOmniRigXT<T>::get_Rig1(void)
{
  Omnirig_tlb::IRigXPtr Value;
  OLECHECK(this->get_Rig1((Omnirig_tlb::IRigXPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOmniRigXT<T>::get_Rig2(Omnirig_tlb::IRigX** Value/*[out,retval]*/)
{
  return (*this)->get_Rig2(Value);
}

template <class T> Omnirig_tlb::IRigXPtr __fastcall
TCOMIOmniRigXT<T>::get_Rig2(void)
{
  Omnirig_tlb::IRigXPtr Value;
  OLECHECK(this->get_Rig2((Omnirig_tlb::IRigXPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOmniRigXT<T>::get_DialogVisible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DialogVisible(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIOmniRigXT<T>::get_DialogVisible(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DialogVisible((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOmniRigXT<T>::set_DialogVisible(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DialogVisible(Value);
}

// *********************************************************************//
// DispIntf:  IOmniRigX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {501A2858-3331-467A-837A-989FDEDACC7D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOmniRigXDispT<T>::get_InterfaceVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InterfaceVersion"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOmniRigXDispT<T>::get_InterfaceVersion(void)
{
  long Value;
  this->get_InterfaceVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOmniRigXDispT<T>::get_SoftwareVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoftwareVersion"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOmniRigXDispT<T>::get_SoftwareVersion(void)
{
  long Value;
  this->get_SoftwareVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOmniRigXDispT<T>::get_Rig1(Omnirig_tlb::IRigX** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rig1"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Omnirig_tlb::IRigX**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::IRigXPtr __fastcall
IOmniRigXDispT<T>::get_Rig1(void)
{
  Omnirig_tlb::IRigXPtr Value;
  this->get_Rig1(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOmniRigXDispT<T>::get_Rig2(Omnirig_tlb::IRigX** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rig2"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Omnirig_tlb::IRigX**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::IRigXPtr __fastcall
IOmniRigXDispT<T>::get_Rig2(void)
{
  Omnirig_tlb::IRigXPtr Value;
  this->get_Rig2(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOmniRigXDispT<T>::get_DialogVisible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DialogVisible"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOmniRigXDispT<T>::get_DialogVisible(void)
{
  VARIANT_BOOL Value;
  this->get_DialogVisible((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOmniRigXDispT<T>::set_DialogVisible(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DialogVisible"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IOmniRigXEvents
// Flags:     (4096) Dispatchable
// GUID:      {2219175F-E561-47E7-AD17-73C4D8891AA1}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOmniRigXEventsDispT<T>::VisibleChange()
{
  _TDispID _dispid(/* VisibleChange */ DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOmniRigXEventsDispT<T>::RigTypeChange(long RigNumber/*[in]*/)
{
  _TDispID _dispid(/* RigTypeChange */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = RigNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOmniRigXEventsDispT<T>::StatusChange(long RigNumber/*[in]*/)
{
  _TDispID _dispid(/* StatusChange */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = RigNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOmniRigXEventsDispT<T>::ParamsChange(long RigNumber/*[in]*/, long Params/*[in]*/)
{
  _TDispID _dispid(/* ParamsChange */ DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = RigNumber /*[VT_I4:0]*/;
  _args[2] = Params /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOmniRigXEventsDispT<T>::CustomReply(long RigNumber/*[in]*/, VARIANT Command/*[in]*/, 
                                     VARIANT Reply/*[in]*/)
{
  _TDispID _dispid(/* CustomReply */ DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = RigNumber /*[VT_I4:0]*/;
  _args[2] = Command /*[VT_VARIANT:0]*/;
  _args[3] = Reply /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIRigX
// Interface: IRigX
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_RigType(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_RigType(Value);
}

template <class T> BSTR __fastcall
TCOMIRigXT<T>::get_RigType(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_RigType((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_ReadableParams(long* Value/*[out,retval]*/)
{
  return (*this)->get_ReadableParams(Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::get_ReadableParams(void)
{
  long Value;
  OLECHECK(this->get_ReadableParams((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_WriteableParams(long* Value/*[out,retval]*/)
{
  return (*this)->get_WriteableParams(Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::get_WriteableParams(void)
{
  long Value;
  OLECHECK(this->get_WriteableParams((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                               VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->IsParamReadable(Param, Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIRigXT<T>::IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/)
{
  VARIANT_BOOL Value;
  OLECHECK(this->IsParamReadable(Param/*[in]*/, (VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                                VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->IsParamWriteable(Param, Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIRigXT<T>::IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/)
{
  VARIANT_BOOL Value;
  OLECHECK(this->IsParamWriteable(Param/*[in]*/, (VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_Status(Omnirig_tlb::RigStatusX* Value/*[out,retval]*/)
{
  return (*this)->get_Status(Value);
}

template <class T> Omnirig_tlb::RigStatusX __fastcall
TCOMIRigXT<T>::get_Status(void)
{
  Omnirig_tlb::RigStatusX Value;
  OLECHECK(this->get_Status((Omnirig_tlb::RigStatusX*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_StatusStr(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_StatusStr(Value);
}

template <class T> BSTR __fastcall
TCOMIRigXT<T>::get_StatusStr(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_StatusStr((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_Freq(long* Value/*[out,retval]*/)
{
  return (*this)->get_Freq(Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::get_Freq(void)
{
  long Value;
  OLECHECK(this->get_Freq((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_Freq(long Value/*[in]*/)
{
  return (*this)->set_Freq(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_FreqA(long* Value/*[out,retval]*/)
{
  return (*this)->get_FreqA(Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::get_FreqA(void)
{
  long Value;
  OLECHECK(this->get_FreqA((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_FreqA(long Value/*[in]*/)
{
  return (*this)->set_FreqA(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_FreqB(long* Value/*[out,retval]*/)
{
  return (*this)->get_FreqB(Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::get_FreqB(void)
{
  long Value;
  OLECHECK(this->get_FreqB((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_FreqB(long Value/*[in]*/)
{
  return (*this)->set_FreqB(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_RitOffset(long* Value/*[out,retval]*/)
{
  return (*this)->get_RitOffset(Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::get_RitOffset(void)
{
  long Value;
  OLECHECK(this->get_RitOffset((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_RitOffset(long Value/*[in]*/)
{
  return (*this)->set_RitOffset(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_Pitch(long* Value/*[out,retval]*/)
{
  return (*this)->get_Pitch(Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::get_Pitch(void)
{
  long Value;
  OLECHECK(this->get_Pitch((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_Pitch(long Value/*[in]*/)
{
  return (*this)->set_Pitch(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_Vfo(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  return (*this)->get_Vfo(Value);
}

template <class T> Omnirig_tlb::RigParamX __fastcall
TCOMIRigXT<T>::get_Vfo(void)
{
  Omnirig_tlb::RigParamX Value;
  OLECHECK(this->get_Vfo((Omnirig_tlb::RigParamX*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_Vfo(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  return (*this)->set_Vfo(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_Split(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  return (*this)->get_Split(Value);
}

template <class T> Omnirig_tlb::RigParamX __fastcall
TCOMIRigXT<T>::get_Split(void)
{
  Omnirig_tlb::RigParamX Value;
  OLECHECK(this->get_Split((Omnirig_tlb::RigParamX*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_Split(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  return (*this)->set_Split(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_Rit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  return (*this)->get_Rit(Value);
}

template <class T> Omnirig_tlb::RigParamX __fastcall
TCOMIRigXT<T>::get_Rit(void)
{
  Omnirig_tlb::RigParamX Value;
  OLECHECK(this->get_Rit((Omnirig_tlb::RigParamX*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_Rit(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  return (*this)->set_Rit(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_Xit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  return (*this)->get_Xit(Value);
}

template <class T> Omnirig_tlb::RigParamX __fastcall
TCOMIRigXT<T>::get_Xit(void)
{
  Omnirig_tlb::RigParamX Value;
  OLECHECK(this->get_Xit((Omnirig_tlb::RigParamX*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_Xit(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  return (*this)->set_Xit(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_Tx(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  return (*this)->get_Tx(Value);
}

template <class T> Omnirig_tlb::RigParamX __fastcall
TCOMIRigXT<T>::get_Tx(void)
{
  Omnirig_tlb::RigParamX Value;
  OLECHECK(this->get_Tx((Omnirig_tlb::RigParamX*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_Tx(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  return (*this)->set_Tx(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_Mode(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  return (*this)->get_Mode(Value);
}

template <class T> Omnirig_tlb::RigParamX __fastcall
TCOMIRigXT<T>::get_Mode(void)
{
  Omnirig_tlb::RigParamX Value;
  OLECHECK(this->get_Mode((Omnirig_tlb::RigParamX*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::set_Mode(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  return (*this)->set_Mode(Value);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::ClearRit(void)
{
  return (*this)->ClearRit();
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::SetSimplexMode(long Freq/*[in]*/)
{
  return (*this)->SetSimplexMode(Freq);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::SetSplitMode(long RxFreq/*[in]*/, long TxFreq/*[in]*/)
{
  return (*this)->SetSplitMode(RxFreq, TxFreq);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::FrequencyOfTone(long Tone/*[in]*/, long* Value/*[out,retval]*/)
{
  return (*this)->FrequencyOfTone(Tone, Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::FrequencyOfTone(long Tone/*[in]*/)
{
  long Value;
  OLECHECK(this->FrequencyOfTone(Tone/*[in]*/, (long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::SendCustomCommand(VARIANT Command/*[in]*/, long ReplyLength/*[in]*/, 
                                 VARIANT ReplyEnd/*[in]*/)
{
  return (*this)->SendCustomCommand(Command, ReplyLength, ReplyEnd);
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::GetRxFrequency(long* Value/*[out,retval]*/)
{
  return (*this)->GetRxFrequency(Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::GetRxFrequency(void)
{
  long Value;
  OLECHECK(this->GetRxFrequency((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::GetTxFrequency(long* Value/*[out,retval]*/)
{
  return (*this)->GetTxFrequency(Value);
}

template <class T> long __fastcall
TCOMIRigXT<T>::GetTxFrequency(void)
{
  long Value;
  OLECHECK(this->GetTxFrequency((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRigXT<T>::get_PortBits(Omnirig_tlb::IPortBits** Value/*[out,retval]*/)
{
  return (*this)->get_PortBits(Value);
}

template <class T> Omnirig_tlb::IPortBitsPtr __fastcall
TCOMIRigXT<T>::get_PortBits(void)
{
  Omnirig_tlb::IPortBitsPtr Value;
  OLECHECK(this->get_PortBits((Omnirig_tlb::IPortBitsPtr*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IRigX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D30A7E51-5862-45B7-BFFA-6415917DA0CF}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRigXDispT<T>::get_RigType(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RigType"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IRigXDispT<T>::get_RigType(void)
{
  BSTR Value;
  this->get_RigType((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_ReadableParams(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadableParams"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::get_ReadableParams(void)
{
  long Value;
  this->get_ReadableParams((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_WriteableParams(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteableParams"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::get_WriteableParams(void)
{
  long Value;
  this->get_WriteableParams((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                               VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsParamReadable"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)Param /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRigXDispT<T>::IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/)
{
  VARIANT_BOOL Value;
  this->IsParamReadable(Param, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/, 
                                VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsParamWriteable"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)Param /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRigXDispT<T>::IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/)
{
  VARIANT_BOOL Value;
  this->IsParamWriteable(Param, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_Status(Omnirig_tlb::RigStatusX* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::RigStatusX __fastcall
IRigXDispT<T>::get_Status(void)
{
  Omnirig_tlb::RigStatusX Value;
  this->get_Status((Omnirig_tlb::RigStatusX*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_StatusStr(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusStr"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IRigXDispT<T>::get_StatusStr(void)
{
  BSTR Value;
  this->get_StatusStr((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_Freq(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Freq"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::get_Freq(void)
{
  long Value;
  this->get_Freq((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_Freq(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Freq"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_FreqA(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FreqA"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::get_FreqA(void)
{
  long Value;
  this->get_FreqA((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_FreqA(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FreqA"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_FreqB(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FreqB"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::get_FreqB(void)
{
  long Value;
  this->get_FreqB((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_FreqB(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FreqB"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_RitOffset(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RitOffset"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::get_RitOffset(void)
{
  long Value;
  this->get_RitOffset((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_RitOffset(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RitOffset"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_Pitch(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pitch"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::get_Pitch(void)
{
  long Value;
  this->get_Pitch((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_Pitch(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pitch"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_Vfo(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vfo"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::RigParamX __fastcall
IRigXDispT<T>::get_Vfo(void)
{
  Omnirig_tlb::RigParamX Value;
  this->get_Vfo((Omnirig_tlb::RigParamX*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_Vfo(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vfo"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_Split(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Split"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::RigParamX __fastcall
IRigXDispT<T>::get_Split(void)
{
  Omnirig_tlb::RigParamX Value;
  this->get_Split((Omnirig_tlb::RigParamX*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_Split(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Split"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_Rit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rit"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::RigParamX __fastcall
IRigXDispT<T>::get_Rit(void)
{
  Omnirig_tlb::RigParamX Value;
  this->get_Rit((Omnirig_tlb::RigParamX*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_Rit(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rit"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_Xit(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Xit"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::RigParamX __fastcall
IRigXDispT<T>::get_Xit(void)
{
  Omnirig_tlb::RigParamX Value;
  this->get_Xit((Omnirig_tlb::RigParamX*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_Xit(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Xit"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_Tx(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tx"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::RigParamX __fastcall
IRigXDispT<T>::get_Tx(void)
{
  Omnirig_tlb::RigParamX Value;
  this->get_Tx((Omnirig_tlb::RigParamX*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_Tx(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tx"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_Mode(Omnirig_tlb::RigParamX* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mode"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::RigParamX __fastcall
IRigXDispT<T>::get_Mode(void)
{
  Omnirig_tlb::RigParamX Value;
  this->get_Mode((Omnirig_tlb::RigParamX*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::set_Mode(Omnirig_tlb::RigParamX Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mode"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::ClearRit()
{
  _TDispID _dispid(*this, OLETEXT("ClearRit"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::SetSimplexMode(long Freq/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSimplexMode"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Freq /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::SetSplitMode(long RxFreq/*[in]*/, long TxFreq/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSplitMode"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = RxFreq /*[VT_I4:0]*/;
  _args[2] = TxFreq /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::FrequencyOfTone(long Tone/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrequencyOfTone"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Tone /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::FrequencyOfTone(long Tone/*[in]*/)
{
  long Value;
  this->FrequencyOfTone(Tone, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::SendCustomCommand(VARIANT Command/*[in]*/, long ReplyLength/*[in]*/, 
                                 VARIANT ReplyEnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendCustomCommand"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = ReplyLength /*[VT_I4:0]*/;
  _args[3] = ReplyEnd /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::GetRxFrequency(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRxFrequency"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::GetRxFrequency(void)
{
  long Value;
  this->GetRxFrequency((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::GetTxFrequency(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTxFrequency"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IRigXDispT<T>::GetTxFrequency(void)
{
  long Value;
  this->GetTxFrequency((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRigXDispT<T>::get_PortBits(Omnirig_tlb::IPortBits** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortBits"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Omnirig_tlb::IPortBits**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Omnirig_tlb::IPortBitsPtr __fastcall
IRigXDispT<T>::get_PortBits(void)
{
  Omnirig_tlb::IPortBitsPtr Value;
  this->get_PortBits(&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIPortBits
// Interface: IPortBits
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPortBitsT<T>::Lock(VARIANT_BOOL* Ok/*[out,retval]*/)
{
  return (*this)->Lock(Ok);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPortBitsT<T>::Lock(void)
{
  VARIANT_BOOL Ok;
  OLECHECK(this->Lock((VARIANT_BOOL*)&Ok));
  return Ok;
}

template <class T> HRESULT __fastcall
TCOMIPortBitsT<T>::get_Rts(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Rts(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPortBitsT<T>::get_Rts(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Rts((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIPortBitsT<T>::set_Rts(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Rts(Value);
}

template <class T> HRESULT __fastcall
TCOMIPortBitsT<T>::get_Dtr(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Dtr(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPortBitsT<T>::get_Dtr(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Dtr((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIPortBitsT<T>::set_Dtr(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Dtr(Value);
}

template <class T> HRESULT __fastcall
TCOMIPortBitsT<T>::get_Cts(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Cts(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPortBitsT<T>::get_Cts(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Cts((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIPortBitsT<T>::get_Dsr(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Dsr(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPortBitsT<T>::get_Dsr(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Dsr((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIPortBitsT<T>::Unlock(void)
{
  return (*this)->Unlock();
}

// *********************************************************************//
// DispIntf:  IPortBits
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DEE2CC8-1EA3-46E7-B8B4-3E7321F2446A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPortBitsDispT<T>::Lock(VARIANT_BOOL* Ok/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Lock"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Ok /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPortBitsDispT<T>::Lock(void)
{
  VARIANT_BOOL Ok;
  this->Lock((VARIANT_BOOL*)&Ok);
  return Ok;
}

template <class T> HRESULT __fastcall
IPortBitsDispT<T>::get_Rts(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rts"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPortBitsDispT<T>::get_Rts(void)
{
  VARIANT_BOOL Value;
  this->get_Rts((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IPortBitsDispT<T>::set_Rts(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rts"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortBitsDispT<T>::get_Dtr(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dtr"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPortBitsDispT<T>::get_Dtr(void)
{
  VARIANT_BOOL Value;
  this->get_Dtr((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IPortBitsDispT<T>::set_Dtr(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dtr"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortBitsDispT<T>::get_Cts(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cts"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPortBitsDispT<T>::get_Cts(void)
{
  VARIANT_BOOL Value;
  this->get_Cts((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IPortBitsDispT<T>::get_Dsr(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dsr"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPortBitsDispT<T>::get_Dsr(void)
{
  VARIANT_BOOL Value;
  this->get_Dsr((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IPortBitsDispT<T>::Unlock()
{
  _TDispID _dispid(*this, OLETEXT("Unlock"), DISPID(6));
  return OleFunction(_dispid);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OmniRigX
// Interface: TCOMIOmniRigX
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOmniRigX, IOmniRigX, &CLSID_OmniRigX, &IID_IOmniRigX> CoOmniRigX;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RigX
// Interface: TCOMIRigX
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRigX, IRigX, &CLSID_RigX, &IID_IRigX> CoRigX;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PortBits
// Interface: TCOMIPortBits
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPortBits, IPortBits, &CLSID_PortBits, &IID_IPortBits> CoPortBits;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : OmniRigX
// Event Interface : IOmniRigXEvents
// *********************************************************************//
template <class T>
class TEvents_OmniRigX : public IConnectionPointImpl<T,
                                                 &DIID_IOmniRigXEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_VisibleChange(void);
  HRESULT         Fire_RigTypeChange(long RigNumber);
  HRESULT         Fire_StatusChange(long RigNumber);
  HRESULT         Fire_ParamsChange(long RigNumber, long Params);
  HRESULT         Fire_CustomReply(long RigNumber, VARIANT Command, VARIANT Reply);
protected:
  IOmniRigXEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_OmniRigX<T>::Fire_VisibleChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.VisibleChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_OmniRigX<T>::Fire_RigTypeChange(long RigNumber)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.RigTypeChange(RigNumber);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_OmniRigX<T>::Fire_StatusChange(long RigNumber)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StatusChange(RigNumber);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_OmniRigX<T>::Fire_ParamsChange(long RigNumber, long Params)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ParamsChange(RigNumber, Params);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_OmniRigX<T>::Fire_CustomReply(long RigNumber, VARIANT Command, VARIANT Reply)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CustomReply(RigNumber, Command, Reply);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Omnirig_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Omnirig_tlb;
#endif

#pragma option pop

#endif // OmniRig_TLBH
