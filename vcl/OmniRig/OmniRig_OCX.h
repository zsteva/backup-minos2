// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev$
// File generated on 15/06/2011 17:42:47 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Afreet\OmniRig\OmniRig.exe (1)
// LIBID: {4FE359C5-A58F-459D-BE95-CA559FB4F270}
// LCID: 0
// Helpfile: 
// HelpString: OmniRig Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   OmniRig_OCXH
#define   OmniRig_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "OmniRig_TLB.h"
namespace Omnirig_tlb
{

// *********************************************************************//
// HelpString: OmniRig Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TOmniRigX
// Help String      : OmniRigX Object
// Default Interface: IOmniRigX
// Def. Intf. Object: IOmniRigXPtr
// Def. Intf. DISP? : No
// Event   Interface: IOmniRigXEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TOmniRigXRigTypeChange)(System::TObject * Sender, 
                                                             long RigNumber/*[in]*/);
typedef void __fastcall (__closure * TOmniRigXStatusChange)(System::TObject * Sender, 
                                                            long RigNumber/*[in]*/);
typedef void __fastcall (__closure * TOmniRigXParamsChange)(System::TObject * Sender, 
                                                            long RigNumber/*[in]*/, 
                                                            long Params/*[in]*/);
typedef void __fastcall (__closure * TOmniRigXCustomReply)(System::TObject * Sender, 
                                                           long RigNumber/*[in]*/, 
                                                           VARIANT Command/*[in]*/, 
                                                           VARIANT Reply/*[in]*/);

class PACKAGE TOmniRigX : public Oleserver::TOleServer
{
  IOmniRigXPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TOmniRigX(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IOmniRigXPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IOmniRigXPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  long            __fastcall get_InterfaceVersion(void);
  long            __fastcall get_SoftwareVersion(void);
  Omnirig_tlb::IRigXPtr __fastcall get_Rig1(void);
  Omnirig_tlb::IRigXPtr __fastcall get_Rig2(void);
  VARIANT_BOOL    __fastcall get_DialogVisible(void);
  void            __fastcall set_DialogVisible(VARIANT_BOOL Value/*[in]*/);
  __property long InterfaceVersion={ read=get_InterfaceVersion };
  __property long SoftwareVersion={ read=get_SoftwareVersion };
  __property Omnirig_tlb::IRigXPtr Rig1={ read=get_Rig1 };
  __property Omnirig_tlb::IRigXPtr Rig2={ read=get_Rig2 };
  __property VARIANT_BOOL DialogVisible={ read=get_DialogVisible, write=set_DialogVisible, stored=false };
private:
  TNotifyEvent                   FOnVisibleChange;
  TOmniRigXRigTypeChange         FOnRigTypeChange;
  TOmniRigXStatusChange          FOnStatusChange;
  TOmniRigXParamsChange          FOnParamsChange;
  TOmniRigXCustomReply           FOnCustomReply;
__published:
  __property TNotifyEvent OnVisibleChange={ read=FOnVisibleChange, write=FOnVisibleChange };
  __property TOmniRigXRigTypeChange OnRigTypeChange={ read=FOnRigTypeChange, write=FOnRigTypeChange };
  __property TOmniRigXStatusChange OnStatusChange={ read=FOnStatusChange, write=FOnStatusChange };
  __property TOmniRigXParamsChange OnParamsChange={ read=FOnParamsChange, write=FOnParamsChange };
  __property TOmniRigXCustomReply OnCustomReply={ read=FOnCustomReply, write=FOnCustomReply };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TRigX
// Help String      : Rig Object
// Default Interface: IRigX
// Def. Intf. Object: IRigXPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TRigX : public Oleserver::TOleServer
{
  IRigXPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TRigX(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IRigXPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IRigXPtr intf);


  BSTR            __fastcall get_RigType(void);
  long            __fastcall get_ReadableParams(void);
  long            __fastcall get_WriteableParams(void);
  Omnirig_tlb::RigStatusX __fastcall get_Status(void);
  BSTR            __fastcall get_StatusStr(void);
  long            __fastcall get_Freq(void);
  void            __fastcall set_Freq(long Value/*[in]*/);
  long            __fastcall get_FreqA(void);
  void            __fastcall set_FreqA(long Value/*[in]*/);
  long            __fastcall get_FreqB(void);
  void            __fastcall set_FreqB(long Value/*[in]*/);
  long            __fastcall get_RitOffset(void);
  void            __fastcall set_RitOffset(long Value/*[in]*/);
  long            __fastcall get_Pitch(void);
  void            __fastcall set_Pitch(long Value/*[in]*/);
  Omnirig_tlb::RigParamX __fastcall get_Vfo(void);
  void            __fastcall set_Vfo(Omnirig_tlb::RigParamX Value/*[in]*/);
  Omnirig_tlb::RigParamX __fastcall get_Split(void);
  void            __fastcall set_Split(Omnirig_tlb::RigParamX Value/*[in]*/);
  Omnirig_tlb::RigParamX __fastcall get_Rit(void);
  void            __fastcall set_Rit(Omnirig_tlb::RigParamX Value/*[in]*/);
  Omnirig_tlb::RigParamX __fastcall get_Xit(void);
  void            __fastcall set_Xit(Omnirig_tlb::RigParamX Value/*[in]*/);
  Omnirig_tlb::RigParamX __fastcall get_Tx(void);
  void            __fastcall set_Tx(Omnirig_tlb::RigParamX Value/*[in]*/);
  Omnirig_tlb::RigParamX __fastcall get_Mode(void);
  void            __fastcall set_Mode(Omnirig_tlb::RigParamX Value/*[in]*/);
  Omnirig_tlb::IPortBitsPtr __fastcall get_PortBits(void);
  VARIANT_BOOL    __fastcall IsParamReadable(Omnirig_tlb::RigParamX Param/*[in]*/);
  VARIANT_BOOL    __fastcall IsParamWriteable(Omnirig_tlb::RigParamX Param/*[in]*/);
  void            __fastcall ClearRit(void);
  void            __fastcall SetSimplexMode(long Freq/*[in]*/);
  void            __fastcall SetSplitMode(long RxFreq/*[in]*/, long TxFreq/*[in]*/);
  long            __fastcall FrequencyOfTone(long Tone/*[in]*/);
  void            __fastcall SendCustomCommand(VARIANT Command/*[in]*/, long ReplyLength/*[in]*/, 
                                               VARIANT ReplyEnd/*[in]*/);
  long            __fastcall GetRxFrequency(void);
  long            __fastcall GetTxFrequency(void);
  __property BSTR RigType={ read=get_RigType };
  __property long ReadableParams={ read=get_ReadableParams };
  __property long WriteableParams={ read=get_WriteableParams };
  __property Omnirig_tlb::RigStatusX Status={ read=get_Status };
  __property BSTR StatusStr={ read=get_StatusStr };
  __property Omnirig_tlb::IPortBitsPtr PortBits={ read=get_PortBits };
  __property long Freq={ read=get_Freq, write=set_Freq, stored=false };
  __property long FreqA={ read=get_FreqA, write=set_FreqA, stored=false };
  __property long FreqB={ read=get_FreqB, write=set_FreqB, stored=false };
  __property long RitOffset={ read=get_RitOffset, write=set_RitOffset, stored=false };
  __property long Pitch={ read=get_Pitch, write=set_Pitch, stored=false };
  __property Omnirig_tlb::RigParamX Vfo={ read=get_Vfo, write=set_Vfo, stored=false };
  __property Omnirig_tlb::RigParamX Split={ read=get_Split, write=set_Split, stored=false };
  __property Omnirig_tlb::RigParamX Rit={ read=get_Rit, write=set_Rit, stored=false };
  __property Omnirig_tlb::RigParamX Xit={ read=get_Xit, write=set_Xit, stored=false };
  __property Omnirig_tlb::RigParamX Tx={ read=get_Tx, write=set_Tx, stored=false };
  __property Omnirig_tlb::RigParamX Mode={ read=get_Mode, write=set_Mode, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPortBits
// Help String      : PortBits Object
// Default Interface: IPortBits
// Def. Intf. Object: IPortBitsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPortBits : public Oleserver::TOleServer
{
  IPortBitsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPortBits(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPortBitsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPortBitsPtr intf);


  VARIANT_BOOL    __fastcall get_Rts(void);
  void            __fastcall set_Rts(VARIANT_BOOL Value/*[in]*/);
  VARIANT_BOOL    __fastcall get_Dtr(void);
  void            __fastcall set_Dtr(VARIANT_BOOL Value/*[in]*/);
  VARIANT_BOOL    __fastcall get_Cts(void);
  VARIANT_BOOL    __fastcall get_Dsr(void);
  VARIANT_BOOL    __fastcall Lock(void);
  void            __fastcall Unlock(void);
  __property VARIANT_BOOL Cts={ read=get_Cts };
  __property VARIANT_BOOL Dsr={ read=get_Dsr };
  __property VARIANT_BOOL Rts={ read=get_Rts, write=set_Rts, stored=false };
  __property VARIANT_BOOL Dtr={ read=get_Dtr, write=set_Dtr, stored=false };
};

};     // namespace Omnirig_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Omnirig_tlb;
#endif

#pragma option pop

#endif // OmniRig_OCXH
